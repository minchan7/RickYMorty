import RickYMorty.*

describe "materiales" {
	
	const lata = new Lata(250)
	const cable = new Cable(50,40) 
	const fleeb = new Fleeb(45,#{lata})
	const materiaOscura = new MateriaOscura(cable)
	const otraMateriaOscura = new MateriaOscura(fleeb)
	const parasito = new ParasitoAlienigena( #{new IncrementoDeEnergia(100), new DecrementoDeEnergia(50)} )
	const parasito2 = new ParasitoAlienigena(#{new ElementoOculto(cable)})
	const parasito3 = new ParasitoAlienigena(#{descartaObjeto})
	const parasito4 = new ParasitoAlienigena(#{entregaObjetos})
		
	test "morty no puede recolectar material "{
		
		morty.aumentarEnergia(25)
		assert.throwsExceptionWithMessage("No tengo energia suficiente para recolectar el material", {morty.recolectar(lata)})
	}
	
	test "morty recolecta una lata "{
		
		morty.aumentarEnergia(350)		
		morty.recolectar(lata)
		assert.that(morty.elementosDeLaMochila().contains(lata))
		assert.equals(200, morty.energia())
	}
	
	test "Morty le da sus materiales al companero" {
		//Chequeo energia
		morty.aumentarEnergia(1000)
		morty.recolectar(lata)
		morty.recolectar(cable)
		morty.recolectar(materiaOscura)
		
		assert.equals(846,morty.energia())
		
		morty.darObjetosA(rick)
		
		//Chequeo del traspaso de los items correctamente
		
		//Mochila vacia de morty
		assert.that(morty.elementosDeLaMochila().isEmpty())
		
		//Mochila de rick con los items que tenia Morty		
		assert.that(rick.mochila().contains(lata))
		assert.that(rick.mochila().contains(cable))
		assert.that(rick.mochila().contains(materiaOscura))

	}
	
	test "que experimento puede realizar rick" {
		
		rick.recibir(#{cable,fleeb})
		assert.that(rick.experimentosQuePuedeRealizar().contains(construirBateria))
	}
	
	test "rick no puede construir experimento" {
		
		rick.recibir(#{lata,fleeb})
		assert.throwsExceptionWithMessage("No puedo construir el experimento", {rick.realizar(construirShockElectrico)})
	}
	
	test "electricidad conducida de una lata, energia producida de lata" {
		
		assert.notThat(lata.energiaProducida() > 0)
		assert.equals(25,lata.electricidadConducida())
	}
	
	test "radiactividad de cable, electricidad conducida de cable " {
	
		assert.notThat(cable.esRadiactivo())
		assert.equals(120,cable.electricidadConducida())	
	}
	
	test "radiactividad de fleeb, cantidad de metal que consumio fleeb " {
		
		fleeb.comerMaterial(materiaOscura)
		assert.that(fleeb.esRadiactivo())
		assert.equals(252,fleeb.gramosMetal())
	}
	
	test "energia producida de  materiaOscura, electricidad conducida de materiaOscura" {
		
		assert.notThat(materiaOscura.energiaProducida() > 0)
		assert.equals(60,materiaOscura.electricidadConducida())
	}
	
	test "bateria" {
		
		const bateria = new Bateria(#{lata,cable})
		
		assert.equals(252,bateria.gramosMetal())
		assert.that(bateria.esRadiactivo())
		assert.equals(504,bateria.energiaProducida()) 
	}
	
	test "circuito" {
		
		const circuito = new Circuito(#{lata,cable})
		
		assert.equals(252,circuito.gramosMetal())
		assert.notThat(circuito.esRadiactivo())
		assert.equals(435,circuito.electricidadConducida())
	}
	
	test "requerimiento para construir una bateria " {
		
		rick.recibir(#{lata,fleeb})
		assert.that(construirBateria.requerimientoParaSerCreado(rick.mochila()))
		
	}
	
	test "requerimiento para construir un circuito" {
		
		rick.recibir(#{lata,cable})
		assert.that(construirCircuito.requerimientoParaSerCreado(rick.mochila()))
		
	}
	
	test "requerimiento para construir un shock electrico " {
		
		rick.recibir(#{lata,fleeb,cable})
		assert.notThat(construirShockElectrico.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
//-------Segunda entrega-------//	
	
	
	test "capacidad de la mochila de summer,energia necesaria para recolectar material" {
		
		assert.equals(2,summer.capacidadMaximaDeMochila())
		assert.equals(200,summer.energiaNecesariaParaRecolectar(lata))
	}
	
	test "summer no tiene energia necesaria para dar objetos a rick" {
		summer.disminuirEnergia(95)
		assert.throwsExceptionWithMessage("No tengo energia suficiente para darle mis materiales a mi companero", {summer.darObjetosA(rick)})
	}
	
	test "buen humor" {
		assert.equals(3,buenHumor.capacidadMaximaDeMochila())
	}
	
	test "mal humor" {
		assert.equals(1,malHumor.capacidadMaximaDeMochila())
	}
	
	test "sobreexitado" {
		assert.equals(6,sobreexitado.capacidadMaximaDeMochila())
	}
	
	test "jerry se pone de mal humor " {
		
		jerry.aumentarEnergia(300)
		jerry.recolectar(cable)
		jerry.darObjetosA(rick)
		jerry.recolectar(lata)
		assert.equals(malHumor,jerry.humor())
		assert.throwsExceptionWithMessage("No tengo lugar en la mochila", {jerry.recolectar(otraMateriaOscura)})
		
	} 
	
	test "jerry sobreexitado "{
		jerry.aumentarEnergia(1000)
		jerry.recolectar(fleeb)
		assert.equals(sobreexitado,jerry.humor())
		
	}
	
	test "jerry se pone de buen humor "{
		
		
		jerry.cambioDeHumor(sobreexitado)
		jerry.recolectar(parasito)
		assert.equals(buenHumor,jerry.humor())
		
	}
	
	test "summer y morty recolectan materia oscura" {
	
		morty.energiaInicial(600)
		summer.energiaInicial(600)
		morty.recolectar(otraMateriaOscura)
		summer.recolectar(otraMateriaOscura)
		assert.equals(100,morty.energia())
		assert.equals(200,summer.energia())
	
	}
	
	
	
	test"recoleccion de una parasito con acciones forzadas sobre la energia" {
		
		
		morty.aumentarEnergia(400)
		morty.recolectar(parasito)
		
		assert.equals(1000-500-10,morty.energia())		
	}
	
	test "recoleccion de una parasito con acciones forzadas sobre recoger un elemento oculto" {
		
		morty.aumentarEnergia(400)
		morty.recolectar(parasito2)
		assert.that(morty.elementosDeLaMochila().contains(cable))
		assert.that(morty.elementosDeLaMochila().contains(parasito2))
	}
	
	test "recoleccion de una parasito con acciones forzadas sobre descartar un objeto"{
		
		morty.aumentarEnergia(400)
		morty.recolectar(lata)
		morty.recolectar(cable)
		morty.recolectar(parasito3)
		assert.equals(2 ,morty.elementosDeLaMochila().size())
	}
	
	test "recoleccion de una parasito con acciones forzadas a entregar sus materiales a un compa√±ero"{
		
		morty.aumentarEnergia(400)
		morty.recolectar(lata)
		morty.recolectar(cable)
		morty.recolectar(parasito4)
		assert.that(morty.elementosDeLaMochila().isEmpty())
		assert.equals(3,rick.mochila().size())
	}
	
	
	test "realizar experimento seleccionando materiales al azar " {
		
		rick.recibir(#{lata,fleeb,cable})
		rick.realizar(construirBateria)
		assert.equals(construirBateria.componentes().size(), 0)
		assert.equals(rick.companero().energia(),95)
		assert.that(construirBateria.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
	test "realizar experimento cambiando la estrategia a ecologico" {
		
		rick.recibir(#{lata,fleeb,cable, materiaOscura})
		rick.cambiarEstrategia(ecologico)
		rick.realizar(construirCircuito)
		assert.equals(construirCircuito.componentes().size(), 0)
		assert.that(construirCircuito.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
	test "realizar experimento con estrategia menorCantidadMetal" {
		
		rick.recibir(#{lata,fleeb,cable, materiaOscura})
		rick.cambiarEstrategia(menorCantidadDeMetal)
		rick.realizar(construirCircuito)
		assert.equals(construirCircuito.componentes().size(), 0)
		assert.that(construirCircuito.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
	test "realizar experimento seleccionando el mejor generador electrico " {
		
		rick.recibir(#{lata,fleeb,cable})
		rick.cambiarEstrategia(mejorGeneradorElectrico)
		rick.realizar(construirBateria)
		assert.equals(construirBateria.componentes().size(), 0)
		assert.equals(rick.companero().energia(),95)
		assert.that(construirBateria.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
	
}

	
	
