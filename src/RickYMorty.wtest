import RickYMorty.*

describe "materiales" {
	
	const lata = new Lata(250)
	const cable = new Cable(50,40) 
	const fleeb = new Fleeb(45,#{lata})
	const materiaOscura = new MateriaOscura(cable)
			
	test "morty no puede recolectar material "{
		
		morty.aumentarEnergia(25)
		assert.throwsExceptionWithMessage("No tengo lugar en la mochila o energia suficiente para recolectar el material", {morty.recolectar(lata)})
	}
	
	test "morty recolecta una lata "{
		
		morty.aumentarEnergia(350)		
		morty.recolectar(lata)
		assert.that(morty.elementosDeLaMochila().contains(lata))
		assert.equals(100, morty.energia())
	}
	
	test "Morty le da sus materiales al companero" {
		//Chequeo energia
		morty.aumentarEnergia(1000)
		morty.recolectar(lata)
		morty.recolectar(cable)
		morty.recolectar(materiaOscura)
		
		assert.equals(746,morty.energia())
		
		morty.darObjetosA(rick)
		
		//Chequeo del traspaso de los items correctamente
		
		//Mochila vacia de morty
		assert.that(morty.elementosDeLaMochila().isEmpty())
		
		//Mochila de rick con los items que tenia Morty		
		assert.that(rick.mochila().contains(lata))
		assert.that(rick.mochila().contains(cable))
		assert.that(rick.mochila().contains(materiaOscura))

	}
	
	test "que experimento puede realizar rick" {
		
		rick.recibir(#{cable,fleeb})
		assert.that(rick.experimentosQuePuedeRealizar().contains(construirBateria))
	}
	
	test "rick no puede construir experimento" {
		
		rick.recibir(#{lata,fleeb})
		assert.throwsExceptionWithMessage("No puedo construir el experimento", {rick.realizar(construirShockElectrico)})
	}
	
	test "electricidad conducida de una lata, energia producida de lata" {
		
		assert.notThat(lata.energiaProducida() > 0)
		assert.equals(25,lata.electricidadConducida())
	}
	
	test "radiactividad de cable, electricidad conducida de cable " {
	
		assert.notThat(cable.esRadiactivo())
		assert.equals(120,cable.electricidadConducida())	
	}
	
	test "radiactividad de fleeb, cantidad de metal que consumio fleeb " {
		
		fleeb.comerMaterial(materiaOscura)
		assert.that(fleeb.esRadiactivo())
		assert.equals(252,fleeb.gramosMetal())
	}
	
	test "energia producida de  materiaOscura, electricidad conducida de materiaOscura" {
		
		assert.notThat(materiaOscura.energiaProducida() > 0)
		assert.equals(60,materiaOscura.electricidadConducida())
	}
	
	test "bateria" {
		
		const bateria = new Bateria(#{lata,cable})
		
		assert.equals(252,bateria.gramosMetal())
		assert.that(bateria.esRadiactivo())
		assert.equals(504,bateria.energiaProducida()) 
	}
	
	test "circuito" {
		
		const circuito = new Circuito(#{lata,cable})
		
		assert.equals(252,circuito.gramosMetal())
		assert.notThat(circuito.esRadiactivo())
		assert.equals(435,circuito.electricidadConducida())
	}
	
	test "requerimiento para construir una bateria " {
		
		rick.recibir(#{lata,fleeb})
		assert.that(construirBateria.requerimientoParaSerCreado(rick.mochila()))
		
	}
	
	test "requerimiento para construir un circuito" {
		
		rick.recibir(#{lata,cable})
		assert.that(construirCircuito.requerimientoParaSerCreado(rick.mochila()))
		
	}
	
	test "requerimiento para construir un shock electrico " {
		
		rick.recibir(#{lata,fleeb,cable})
		assert.notThat(construirShockElectrico.requerimientoParaSerCreado(rick.mochila()))
			
	}
	
	
}

